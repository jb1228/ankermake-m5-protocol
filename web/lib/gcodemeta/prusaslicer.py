import re
import json

from base64 import b64decode

from web.model import FileMetadata, FileThumbnail
from web.lib.gcodemeta import GCodeMeta


re_slicer = re.compile("^; generated by (\S+) (\S+) on (.+)")
re_slicer_utc = re.compile("(\S+) at (\S+) UTC")
re_thumb_begin = re.compile(b"thumbnail_JPG begin (\d+)x(\d+) (\d+)")
re_thumb_end = re.compile(b"thumbnail_JPG end")


class GCodeMetaPrusaSlicer(GCodeMeta):

    def detect_first_line(self, line):
        return b"generated by PrusaSlicer" in line

    @staticmethod
    def parse_prop(val):
        try:
            return json.loads(val)
        except json.decoder.JSONDecodeError:
            return val

    def _parse_slicer(self, line):
        m = re_slicer.match(line)
        res = {}

        slicer, version, tail = m.groups()

        res["__slicer_name"] = slicer
        res["__slicer_version"] = version

        if m := re_slicer_utc.match(tail):
            res["__slicer_date"] = f"{m.group(1)}_{m.group(2)}_UTC"

        return res

    def _parse_props(self, data, prefix=""):
        if data.startswith(b"; generated by "):
            res = self._parse_slicer(data[:1024].splitlines()[0].decode())
        else:
            res = {}

        thumbs = []
        thumb = []
        thumb_size = None

        for line in data.splitlines():
            if not line.startswith(b"; "):
                continue

            line = line.removeprefix(b"; ").strip()
            if not line:
                continue

            if b" = " in line:
                key, value = line.removeprefix(b"; ").decode().split(" = ", 1)
                key = key.lower().translate(str.maketrans(" ", "_", "[]()"))

                res[prefix + key] = self.parse_prop(value.strip())
            elif m := re_thumb_begin.match(line):
                thumb = []
                thumb_size = [int(m.group(1)), int(m.group(2))]
            elif m := re_thumb_end.match(line):
                thumbs.append((thumb_size, b64decode("".join(thumb))))
                thumb = []
            else:
                thumb.append(line.decode())

        if not thumbs:
            return res

        res["__thumbs"] = []
        for t in thumbs:
            res["__thumbs"].append({
                "width": t[0][0],
                "height": t[0][1],
                "data": t[1],
            })

        return res

    def load_props(self, fd):
        headsize = 32 * 1024
        tailsize = 32 * 1024

        fd.seek(0, 2)
        fsize = fd.tell()

        if fsize > (headsize + tailsize):
            fd.seek(-tailsize, 2)
            tail = fd.read(tailsize)
            fd.seek(0)
            head = fd.read(headsize)
            return {
                **self._parse_props(head, prefix="_"),
                **self._parse_props(tail),
            }
        else:
            fd.seek(0)
            return self._parse_props(fd.read())

    def _parse_estimated_time(self, time):
        total = 0
        for part in time.split():
            val = int(part[:-1])
            match part[-1]:
                case "s": total += val
                case "m": total += val * 60
                case "h": total += val * 60 * 60
        return total

    def load_metadata(self, props):
        estimated_time = self._parse_estimated_time(props.get("estimated_printing_time_normal_mode"))

        return FileMetadata(
            print_start_time=None,
            size=None,
            modified=None,
            uuid=None,
            estimated_time=estimated_time,
            filename=None,
            first_layer_bed_temp=props.get("first_layer_bed_temperature"),
            first_layer_extr_temp=props.get("first_layer_temperature"),
            first_layer_height=props.get("first_layer_height"),
            gcode_end_byte=None,
            gcode_start_byte=None,
            layer_height=props.get("layer_height"),
            nozzle_diameter=props.get("nozzle_diameter"),
            object_height=None,
            slicer=props.get("__slicer_name"),
            slicer_version=props.get("__slicer_version"),
            thumbnails=[],
            filament_name=props.get("filament_name"),
            filament_type=props.get("filament_type"),
            filament_total=props.get("filament_total") or props.get("filament_used_mm"),
            filament_weight_total=props.get("filament_weight_total") or props.get("filament_used_g"),
        )
